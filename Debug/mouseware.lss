
mouseware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000174  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a9c  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000086e  00000000  00000000  00000d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f1  00000000  00000000  00001602  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001af4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040d  00000000  00000000  00001bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012c  00000000  00000000  00001fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000020f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  8e:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <setup>:
#include <util/delay.h>

void setup ( void )
{
	// setup UART
	UCSR0B = 1 << TXEN0;
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UBRR0 = 103;
  9c:	87 e6       	ldi	r24, 0x67	; 103
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  a4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	// setup DDR for motor control pins
	DDRD |= 1 << LEFTPWM | 1 << RIGHTPWM | 1 << LEFTPWM | 1 << RIGHTPWM | 1 << REDLED;
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	80 67       	ori	r24, 0x70	; 112
  ac:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 1 << ENMOTORS | 1 << GREENLED;
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	82 62       	ori	r24, 0x22	; 34
  b2:	84 b9       	out	0x04, r24	; 4

	OCR0B = 128;
  b4:	80 e8       	ldi	r24, 0x80	; 128
  b6:	88 bd       	out	0x28, r24	; 40
	OCR0A = 12;
  b8:	8c e0       	ldi	r24, 0x0C	; 12
  ba:	87 bd       	out	0x27, r24	; 39


	TCCR0A = 1 << COM0B1 | 1<< COM0A1 | 1 << WGM01 | 1 << WGM00;
  bc:	83 ea       	ldi	r24, 0xA3	; 163
  be:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 1 << CS01;
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	85 bd       	out	0x25, r24	; 37
  c4:	08 95       	ret

000000c6 <PutChar>:
}

void PutChar ( char in )
{
	while((UCSR0A & 1 << UDRE0 ) == 0 );
  c6:	e0 ec       	ldi	r30, 0xC0	; 192
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	95 ff       	sbrs	r25, 5
  ce:	fd cf       	rjmp	.-6      	; 0xca <PutChar+0x4>
	UDR0 = in;
  d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  d4:	08 95       	ret

000000d6 <simpleprintf>:
}

void simpleprintf ( char string[] )
{
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	ec 01       	movw	r28, r24
	int i = 0;
	while( string[i] != 0 )
  dc:	88 81       	ld	r24, Y
  de:	88 23       	and	r24, r24
  e0:	31 f0       	breq	.+12     	; 0xee <simpleprintf+0x18>
  e2:	21 96       	adiw	r28, 0x01	; 1
	{
		PutChar(string[i]);
  e4:	0e 94 63 00 	call	0xc6	; 0xc6 <PutChar>
}

void simpleprintf ( char string[] )
{
	int i = 0;
	while( string[i] != 0 )
  e8:	89 91       	ld	r24, Y+
  ea:	81 11       	cpse	r24, r1
  ec:	fb cf       	rjmp	.-10     	; 0xe4 <simpleprintf+0xe>
	{
		PutChar(string[i]);
		i++;
	}
	PutChar('\r');
  ee:	8d e0       	ldi	r24, 0x0D	; 13
  f0:	0e 94 63 00 	call	0xc6	; 0xc6 <PutChar>
}
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <main>:
#include "motors.h"


int main(void)
{
	setup();		// a function in hardware.c that sets up the micro's registers etc
  fa:	0e 94 4b 00 	call	0x96	; 0x96 <setup>

	setLMOTOR(0, FORWARDS);
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 a6 00 	call	0x14c	; 0x14c <setLMOTOR>
	setRMOTOR(0, FORWARDS);
 106:	61 e0       	ldi	r22, 0x01	; 1
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 af 00 	call	0x15e	; 0x15e <setRMOTOR>

	simpleprintf("Aston Mouse with AVR C");
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	0e 94 6b 00 	call	0xd6	; 0xd6 <simpleprintf>

	// enable motors
	PORTB |= 1 << ENMOTORS;
 116:	2d 9a       	sbi	0x05, 5	; 5

	// turn on the GREEN LED
	PORTB |= 1 << GREENLED;
 118:	29 9a       	sbi	0x05, 1	; 5

	// wait for BUT1 to be pressed
	while ( PIND & (1 << BUTTON1) );
 11a:	4f 99       	sbic	0x09, 7	; 9
 11c:	fe cf       	rjmp	.-4      	; 0x11a <main+0x20>

	PORTD |= 1 << REDLED;
 11e:	5c 9a       	sbi	0x0b, 4	; 11

	/* Replace with your application code */
    while (1)
    {
    	setLMOTOR(200, BACKWARDS);
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	88 ec       	ldi	r24, 0xC8	; 200
 124:	0e 94 a6 00 	call	0x14c	; 0x14c <setLMOTOR>


		if ( !(PINB & (1 << BUTTON2)) )
 128:	18 99       	sbic	0x03, 0	; 3
 12a:	09 c0       	rjmp	.+18     	; 0x13e <main+0x44>
		{
			setLMOTOR(0, FORWARDS);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 a6 00 	call	0x14c	; 0x14c <setLMOTOR>
			setRMOTOR(0, FORWARDS);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 af 00 	call	0x15e	; 0x15e <setRMOTOR>
			PORTB &= ~(1 << ENMOTORS);
 13c:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	8f e3       	ldi	r24, 0x3F	; 63
 140:	9c e9       	ldi	r25, 0x9C	; 156
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <main+0x48>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x4e>
 148:	00 00       	nop
 14a:	ea cf       	rjmp	.-44     	; 0x120 <main+0x26>

0000014c <setLMOTOR>:
 * dir controls the direction of the motor, either FORWARDS or BACKWARDS
 *
 ***************************************************************************************/
void setLMOTOR ( unsigned char speedval, char dir )
{
    if ( dir == FORWARDS )
 14c:	61 30       	cpi	r22, 0x01	; 1
 14e:	21 f4       	brne	.+8      	; 0x158 <setLMOTOR+0xc>
    {
    	if ( LFORWARDS )
    		PORTD |= 1 << LEFTDIR;
 150:	5a 9a       	sbi	0x0b, 2	; 11
    	else
    	    PORTD &= ~(1 << LEFTDIR	);

    	leftPWM(255-speedval);  		// swap for speedval if you change LFORWARDS
 152:	80 95       	com	r24
    }
}

void leftPWM ( unsigned char pwmval )
{
	OCR0B = pwmval;
 154:	88 bd       	out	0x28, r24	; 40
 156:	08 95       	ret
    else
    {
    	if ( !LFORWARDS )
    	    PORTD |= 1 << LEFTDIR;
    	else
    		PORTD &= ~(1 << LEFTDIR	);
 158:	5a 98       	cbi	0x0b, 2	; 11
    }
}

void leftPWM ( unsigned char pwmval )
{
	OCR0B = pwmval;
 15a:	88 bd       	out	0x28, r24	; 40
 15c:	08 95       	ret

0000015e <setRMOTOR>:
 * dir controls the direction of the motor, either FORWARDS or BACKWARDS
 *
 ***************************************************************************************/
void setRMOTOR ( unsigned char speedval, char dir )
{
    if ( dir == FORWARDS )
 15e:	61 30       	cpi	r22, 0x01	; 1
 160:	21 f4       	brne	.+8      	; 0x16a <setRMOTOR+0xc>
    {
    	if ( RFORWARDS )
    	    PORTD |= 1 << RIGHTDIR;
 162:	5b 9a       	sbi	0x0b, 3	; 11
    	else
    	    PORTD &= ~(1 << RIGHTDIR);

        rightPWM(255-speedval);  			// swap for speedval; if you change RFORWARDS
 164:	80 95       	com	r24
	OCR0B = pwmval;
}

void rightPWM ( unsigned char pwmval )
{
	OCR0A = pwmval;
 166:	87 bd       	out	0x27, r24	; 39
 168:	08 95       	ret
    else
    {
    	if ( !RFORWARDS )
    		PORTD |= 1 << RIGHTDIR;
    	else
    		PORTD &= ~(1 << RIGHTDIR);
 16a:	5b 98       	cbi	0x0b, 3	; 11
	OCR0B = pwmval;
}

void rightPWM ( unsigned char pwmval )
{
	OCR0A = pwmval;
 16c:	87 bd       	out	0x27, r24	; 39
 16e:	08 95       	ret

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
